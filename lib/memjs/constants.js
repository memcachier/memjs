"use strict";
/*
Constants from memcached binary protocol docs
https://github.com/couchbase/memcached/blob/master/docs/BinaryProtocol.md#0x0d-getkq-get-with-key-quietly

Note: not all constants in here are implemented in this library, not all constants from the docs are included here
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.OP_RDELETE = exports.OP_RPREPENDQ = exports.OP_RPREPEND = exports.OP_RAPPENDQ = exports.OP_RAPPEND = exports.OP_RSETQ = exports.OP_RSET = exports.OP_RGET = exports.OP_SHUTDOWN = exports.OP_AUDIT_CONFIG_RELOAD = exports.OP_AUDIT_PUT = exports.OP_CONFIG_RELOAD = exports.OP_CONFIG_VALIDATE = exports.OP_IOCTL_SET = exports.OP_IOCTL_GET = exports.OP_SASL_STEP = exports.OP_SASL_AUTH = exports.OP_SASL_LIST_MECHS = exports.OP_HELO = exports.OP_GATQ = exports.OP_GAT = exports.OP_TOUCH = exports.OP_VERBOSITY = exports.OP_PREPENDQ = exports.OP_APPENDQ = exports.OP_FLUSHQ = exports.OP_QUITQ = exports.OP_DECREMENTQ = exports.OP_INCREMENTQ = exports.OP_DELETEQ = exports.OP_REPLACEQ = exports.OP_ADDQ = exports.OP_SETQ = exports.OP_STAT = exports.OP_PREPEND = exports.OP_APPEND = exports.OP_GETKQ = exports.OP_GETK = exports.OP_VERSION = exports.OP_NO_OP = exports.OP_GETQ = exports.OP_FLUSH = exports.OP_QUIT = exports.OP_DECREMENT = exports.OP_INCREMENT = exports.OP_DELETE = exports.OP_REPLACE = exports.OP_ADD = exports.OP_SET = exports.OP_GET = void 0;
exports.OP_RESET_REPLICATION_CHAIN = exports.OP_DEREGISTER_TAP_CLIENT = exports.OP_LAST_CLOSED_CHECKPOINT = exports.OP_UNLOCK_KEY = exports.OP_GET_LOCKED = exports.OP_EVICT_KEY = exports.OP_OBSERVE = exports.OP_OBSERVE_SEQNO = exports.OP_ASSUME_ROLE = exports.OP_SELECT_BUCKET = exports.OP_LIST_BUCKETS = exports.OP_DELETE_BUCKET = exports.OP_CREATE_BUCKET = exports.OP_GET_REPLICA = exports.OP_SET_PARAM = exports.OP_START_PERSISTENCE = exports.OP_STOP_PERSISTENCE = exports.OP_DCP_RESERVED4 = exports.OP_DCP_CONTROL = exports.OP_DCP_BUFFER_ACKNOWLEDGEMENT = exports.OP_DCP_NOOP = exports.OP_DCP_SET_VBUCKET_STATE = exports.OP_DCP_FLUSH = exports.OP_DCP_EXPIRATION = exports.OP_DCP_DELETION = exports.OP_DCP_MUTATION = exports.OP_DCP_SNAPSHOT_MARKER = exports.OP_DCP_STREAM_END = exports.OP_DCP_GET_FAILOVER_LOG = exports.OP_DCP_STREAM_REQ = exports.OP_DCP_CLOSE_STREAM = exports.OP_DCP_ADD_STREAM = exports.OP_DCP_OPEN = exports.OP_GET_ALL_VB_SEQNOS = exports.OP_TAP_CHECKPOINT_END = exports.OP_TAP_CHECKOUT_START = exports.OP_TAP_VBUCKET_SET = exports.OP_TAP_OPAQUE = exports.OP_TAP_FLUSH = exports.OP_TAP_DELETE = exports.OP_TAP_MUTATION = exports.OP_TAP_CONNECT = exports.OP_DEL_VBUCKET = exports.OP_GET_VBUCKET = exports.OP_SET_VBUCKET = exports.OP_RDECRQ = exports.OP_RDECR = exports.OP_RINCRQ = exports.OP_RINCR = exports.OP_RDELETEQ = void 0;
exports.responseStatusToString = exports.ResponseStatus = exports.OP_INIT_COMPLETE = exports.OP_GET_CTRL_TOKEN = exports.OP_SET_CTRL_TOKEN = exports.OP_GET_CMD_TIMER = exports.OP_SSL_CERTS_REFRESH = exports.OP_ISASL_REFRESH = exports.OP_SCRUB = exports.OP_SUBDOC_GET_COUNT = exports.OP_SUBDOC_MULTI_MUTATION = exports.OP_SUBDOC_MULTI_LOOKUP = exports.OP_SUBDOC_COUNTER = exports.OP_SUBDOC_ARRAY_ADD_UNIQUE = exports.OP_SUBDOC_ARRAY_INSERT = exports.OP_SUBDOC_ARRAY_PUSH_FIRST = exports.OP_SUBDOC_ARRAY_PUSH_LAST = exports.OP_SUBDOC_REPLACE = exports.OP_SUBDOC_DELETE = exports.OP_SUBDOC_DICT_UPSERT = exports.OP_SUBDOC_DICT_ADD = exports.OP_SUBDOC_EXISTS = exports.OP_SUBDOC_GET = exports.OP_GET_ADJUSTED_TIME = exports.OP_SET_DRIFT_COUNTER_STATE = exports.OP_GET_KEYS = exports.OP_SEQNO_PERSISTENCE = exports.OP_GET_RANDOM_KEY = exports.OP_GET_CLUSTER_CONFIG = exports.OP_SET_CLUSTER_CONFIG = exports.OP_COMPACT_DB = exports.OP_RETURN_META = exports.OP_CHECKPOINT_PERSISTENCE = exports.OP_CHANGE_VB_FILTER = exports.OP_DISABLE_TRAFFIC = exports.OP_ENABLE_TRAFFIC = exports.OP_NOTIFY_VBUCKET_UPDATE = exports.OP_CREATE_CHECKPOINT = exports.OP_DELQ_WITH_META = exports.OP_DEL_WITH_META = exports.OP_VBUCKET_BATCH_COUNT = exports.OP_SNAPSHOT_VB_STATES = exports.OP_ADDQ_WITH_META = exports.OP_ADD_WITH_META = exports.OP_SETQ_WITH_META = exports.OP_SET_WITH_META = exports.OP_GETQ_META = exports.OP_GET_META = void 0;
exports.OP_GET = 0x00;
exports.OP_SET = 0x01;
exports.OP_ADD = 0x02;
exports.OP_REPLACE = 0x03;
exports.OP_DELETE = 0x04;
exports.OP_INCREMENT = 0x05;
exports.OP_DECREMENT = 0x06;
exports.OP_QUIT = 0x07;
exports.OP_FLUSH = 0x08;
exports.OP_GETQ = 0x09;
exports.OP_NO_OP = 0x0a;
exports.OP_VERSION = 0x0b;
exports.OP_GETK = 0x0c;
exports.OP_GETKQ = 0x0d;
exports.OP_APPEND = 0x0e;
exports.OP_PREPEND = 0x0f;
exports.OP_STAT = 0x10;
exports.OP_SETQ = 0x11;
exports.OP_ADDQ = 0x12;
exports.OP_REPLACEQ = 0x13;
exports.OP_DELETEQ = 0x14;
exports.OP_INCREMENTQ = 0x15;
exports.OP_DECREMENTQ = 0x16;
exports.OP_QUITQ = 0x17;
exports.OP_FLUSHQ = 0x18;
exports.OP_APPENDQ = 0x19;
exports.OP_PREPENDQ = 0x1a;
exports.OP_VERBOSITY = 0x1b;
exports.OP_TOUCH = 0x1c;
exports.OP_GAT = 0x1d;
exports.OP_GATQ = 0x1e;
exports.OP_HELO = 0x1f;
exports.OP_SASL_LIST_MECHS = 0x20;
exports.OP_SASL_AUTH = 0x21;
exports.OP_SASL_STEP = 0x22;
exports.OP_IOCTL_GET = 0x23;
exports.OP_IOCTL_SET = 0x24;
exports.OP_CONFIG_VALIDATE = 0x25;
exports.OP_CONFIG_RELOAD = 0x26;
exports.OP_AUDIT_PUT = 0x27;
exports.OP_AUDIT_CONFIG_RELOAD = 0x28;
exports.OP_SHUTDOWN = 0x29;
exports.OP_RGET = 0x30;
exports.OP_RSET = 0x31;
exports.OP_RSETQ = 0x32;
exports.OP_RAPPEND = 0x33;
exports.OP_RAPPENDQ = 0x34;
exports.OP_RPREPEND = 0x35;
exports.OP_RPREPENDQ = 0x36;
exports.OP_RDELETE = 0x37;
exports.OP_RDELETEQ = 0x38;
exports.OP_RINCR = 0x39;
exports.OP_RINCRQ = 0x3a;
exports.OP_RDECR = 0x3b;
exports.OP_RDECRQ = 0x3c;
exports.OP_SET_VBUCKET = 0x3d;
exports.OP_GET_VBUCKET = 0x3e;
exports.OP_DEL_VBUCKET = 0x3f;
exports.OP_TAP_CONNECT = 0x40;
exports.OP_TAP_MUTATION = 0x41;
exports.OP_TAP_DELETE = 0x42;
exports.OP_TAP_FLUSH = 0x43;
exports.OP_TAP_OPAQUE = 0x44;
exports.OP_TAP_VBUCKET_SET = 0x45;
exports.OP_TAP_CHECKOUT_START = 0x46;
exports.OP_TAP_CHECKPOINT_END = 0x47;
exports.OP_GET_ALL_VB_SEQNOS = 0x48;
exports.OP_DCP_OPEN = 0x50;
exports.OP_DCP_ADD_STREAM = 0x51;
exports.OP_DCP_CLOSE_STREAM = 0x52;
exports.OP_DCP_STREAM_REQ = 0x53;
exports.OP_DCP_GET_FAILOVER_LOG = 0x54;
exports.OP_DCP_STREAM_END = 0x55;
exports.OP_DCP_SNAPSHOT_MARKER = 0x56;
exports.OP_DCP_MUTATION = 0x57;
exports.OP_DCP_DELETION = 0x58;
exports.OP_DCP_EXPIRATION = 0x59;
exports.OP_DCP_FLUSH = 0x5a;
exports.OP_DCP_SET_VBUCKET_STATE = 0x5b;
exports.OP_DCP_NOOP = 0x5c;
exports.OP_DCP_BUFFER_ACKNOWLEDGEMENT = 0x5d;
exports.OP_DCP_CONTROL = 0x5e;
exports.OP_DCP_RESERVED4 = 0x5f;
exports.OP_STOP_PERSISTENCE = 0x80;
exports.OP_START_PERSISTENCE = 0x81;
exports.OP_SET_PARAM = 0x82;
exports.OP_GET_REPLICA = 0x83;
exports.OP_CREATE_BUCKET = 0x85;
exports.OP_DELETE_BUCKET = 0x86;
exports.OP_LIST_BUCKETS = 0x87;
exports.OP_SELECT_BUCKET = 0x89;
exports.OP_ASSUME_ROLE = 0x8a;
exports.OP_OBSERVE_SEQNO = 0x91;
exports.OP_OBSERVE = 0x92;
exports.OP_EVICT_KEY = 0x93;
exports.OP_GET_LOCKED = 0x94;
exports.OP_UNLOCK_KEY = 0x95;
exports.OP_LAST_CLOSED_CHECKPOINT = 0x97;
exports.OP_DEREGISTER_TAP_CLIENT = 0x9e;
exports.OP_RESET_REPLICATION_CHAIN = 0x9f;
exports.OP_GET_META = 0xa0;
exports.OP_GETQ_META = 0xa1;
exports.OP_SET_WITH_META = 0xa2;
exports.OP_SETQ_WITH_META = 0xa3;
exports.OP_ADD_WITH_META = 0xa4;
exports.OP_ADDQ_WITH_META = 0xa5;
exports.OP_SNAPSHOT_VB_STATES = 0xa6;
exports.OP_VBUCKET_BATCH_COUNT = 0xa7;
exports.OP_DEL_WITH_META = 0xa8;
exports.OP_DELQ_WITH_META = 0xa9;
exports.OP_CREATE_CHECKPOINT = 0xaa;
exports.OP_NOTIFY_VBUCKET_UPDATE = 0xac;
exports.OP_ENABLE_TRAFFIC = 0xad;
exports.OP_DISABLE_TRAFFIC = 0xae;
exports.OP_CHANGE_VB_FILTER = 0xb0;
exports.OP_CHECKPOINT_PERSISTENCE = 0xb1;
exports.OP_RETURN_META = 0xb2;
exports.OP_COMPACT_DB = 0xb3;
exports.OP_SET_CLUSTER_CONFIG = 0xb4;
exports.OP_GET_CLUSTER_CONFIG = 0xb5;
exports.OP_GET_RANDOM_KEY = 0xb6;
exports.OP_SEQNO_PERSISTENCE = 0xb7;
exports.OP_GET_KEYS = 0xb8;
exports.OP_SET_DRIFT_COUNTER_STATE = 0xc1;
exports.OP_GET_ADJUSTED_TIME = 0xc2;
exports.OP_SUBDOC_GET = 0xc5;
exports.OP_SUBDOC_EXISTS = 0xc6;
exports.OP_SUBDOC_DICT_ADD = 0xc7;
exports.OP_SUBDOC_DICT_UPSERT = 0xc8;
exports.OP_SUBDOC_DELETE = 0xc9;
exports.OP_SUBDOC_REPLACE = 0xca;
exports.OP_SUBDOC_ARRAY_PUSH_LAST = 0xcb;
exports.OP_SUBDOC_ARRAY_PUSH_FIRST = 0xcc;
exports.OP_SUBDOC_ARRAY_INSERT = 0xcd;
exports.OP_SUBDOC_ARRAY_ADD_UNIQUE = 0xce;
exports.OP_SUBDOC_COUNTER = 0xcf;
exports.OP_SUBDOC_MULTI_LOOKUP = 0xd0;
exports.OP_SUBDOC_MULTI_MUTATION = 0xd1;
exports.OP_SUBDOC_GET_COUNT = 0xd2;
exports.OP_SCRUB = 0xf0;
exports.OP_ISASL_REFRESH = 0xf1;
exports.OP_SSL_CERTS_REFRESH = 0xf2;
exports.OP_GET_CMD_TIMER = 0xf3;
exports.OP_SET_CTRL_TOKEN = 0xf4;
exports.OP_GET_CTRL_TOKEN = 0xf5;
exports.OP_INIT_COMPLETE = 0xf6;
/**
 * Response statuses
 * https://github.com/memcached/memcached/wiki/BinaryProtocolRevamped#response-status
 */
exports.ResponseStatus = {
    /** Named "No error" in the memcached docs, but clearer in code as "SUCCESS". */
    SUCCESS: 0x0000,
    KEY_NOT_FOUND: 0x0001,
    KEY_EXISTS: 0x0002,
    VALUE_TOO_LARGE: 0x0003,
    INVALID_ARGUMENTS: 0x0004,
    ITEM_NOT_STORED: 0x0005,
    INCR_DECR_ON_NON_NUMERIC_VALUE: 0x0006,
    THE_VBUCKET_BELONGS_TO_ANOTHER_SERVER: 0x0007,
    AUTHENTICATION_ERROR: 0x0008,
    AUTHENTICATION_CONTINUE: 0x0009,
    UNKNOWN_COMMAND: 0x0081,
    OUT_OF_MEMORY: 0x0082,
    NOT_SUPPORTED: 0x0083,
    INTERNAL_ERROR: 0x0084,
    BUSY: 0x0085,
    TEMPORARY_FAILURE: 0x0086,
};
function responseStatusToString(responseStatus) {
    switch (responseStatus) {
        case 0x0000:
            return "No error";
        case 0x0001:
            return "Key not found";
        case 0x0002:
            return "Key exists";
        case 0x0003:
            return "Value too large";
        case 0x0004:
            return "Invalid arguments";
        case 0x0005:
            return "Item not stored";
        case 0x0006:
            return "Incr/Decr on non-numeric value";
        case 0x0007:
            return "The vbucket belongs to another server";
        case 0x0008:
            return "Authentication error";
        case 0x0009:
            return "Authentication continue";
        case 0x0081:
            return "Unknown command";
        case 0x0082:
            return "Out of memory";
        case 0x0083:
            return "Not supported";
        case 0x0084:
            return "Internal error";
        case 0x0085:
            return "Busy";
        case 0x0086:
            return "Temporary failure";
        default:
            return `Unknown response status ${responseStatus}`;
    }
}
exports.responseStatusToString = responseStatusToString;
//# sourceMappingURL=data:application/json;base64,