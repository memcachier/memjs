"use strict";
// # MemJS Memcache binary protocol header
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBuffer = exports.fromBuffer = void 0;
/** fromBuffer converts a serialized header to a JS object. */
function fromBuffer(headerBuf) {
    if (!headerBuf) {
        return {}; // TODO
    }
    return {
        magic: headerBuf.readUInt8(0),
        opcode: headerBuf.readUInt8(1),
        keyLength: headerBuf.readUInt16BE(2),
        extrasLength: headerBuf.readUInt8(4),
        dataType: headerBuf.readUInt8(5),
        status: headerBuf.readUInt16BE(6),
        totalBodyLength: headerBuf.readUInt32BE(8),
        opaque: headerBuf.readUInt32BE(12),
        cas: headerBuf.slice(16, 24),
    };
}
exports.fromBuffer = fromBuffer;
/** toBuffer converts a JS memcache header object to a binary memcache header */
function toBuffer(header) {
    const headerBuf = Buffer.alloc(24);
    headerBuf.writeUInt8(header.magic, 0);
    headerBuf.writeUInt8(header.opcode, 1);
    headerBuf.writeUInt16BE(header.keyLength, 2);
    headerBuf.writeUInt8(header.extrasLength, 4);
    headerBuf.writeUInt8(header.dataType || 0, 5);
    headerBuf.writeUInt16BE(header.status || 0, 6);
    headerBuf.writeUInt32BE(header.totalBodyLength, 8);
    headerBuf.writeUInt32BE(header.opaque || 0, 12);
    if (header.cas) {
        header.cas.copy(headerBuf, 16);
    }
    else {
        headerBuf.fill("\x00", 16);
    }
    return headerBuf;
}
exports.toBuffer = toBuffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21lbWpzL2hlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQTBDOzs7QUFnQjFDLDhEQUE4RDtBQUM5RCxTQUFnQixVQUFVLENBQUMsU0FBaUI7SUFDMUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE9BQU8sRUFBUyxDQUFDLENBQUMsT0FBTztLQUMxQjtJQUNELE9BQU87UUFDTCxLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsTUFBTSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFPO1FBQ3BDLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNwQyxZQUFZLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDcEMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBbUI7UUFDbkQsZUFBZSxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0tBQzdCLENBQUM7QUFDSixDQUFDO0FBZkQsZ0NBZUM7QUFFRCxnRkFBZ0Y7QUFDaEYsU0FBZ0IsUUFBUSxDQUFDLE1BQWM7SUFDckMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNoQztTQUFNO1FBQ0wsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDNUI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBaEJELDRCQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vICMgTWVtSlMgTWVtY2FjaGUgYmluYXJ5IHByb3RvY29sIGhlYWRlclxuXG5pbXBvcnQgeyBPUCwgUmVzcG9uc2VTdGF0dXMgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBIZWFkZXIge1xuICBtYWdpYzogbnVtYmVyO1xuICBvcGNvZGU6IE9QO1xuICBrZXlMZW5ndGg6IG51bWJlcjtcbiAgZXh0cmFzTGVuZ3RoOiBudW1iZXI7XG4gIGRhdGFUeXBlPzogbnVtYmVyO1xuICBzdGF0dXM/OiBSZXNwb25zZVN0YXR1cztcbiAgdG90YWxCb2R5TGVuZ3RoOiBudW1iZXI7XG4gIG9wYXF1ZTogbnVtYmVyO1xuICBjYXM/OiBCdWZmZXI7XG59XG5cbi8qKiBmcm9tQnVmZmVyIGNvbnZlcnRzIGEgc2VyaWFsaXplZCBoZWFkZXIgdG8gYSBKUyBvYmplY3QuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUJ1ZmZlcihoZWFkZXJCdWY6IEJ1ZmZlcik6IEhlYWRlciB7XG4gIGlmICghaGVhZGVyQnVmKSB7XG4gICAgcmV0dXJuIHt9IGFzIGFueTsgLy8gVE9ET1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFnaWM6IGhlYWRlckJ1Zi5yZWFkVUludDgoMCksXG4gICAgb3Bjb2RlOiBoZWFkZXJCdWYucmVhZFVJbnQ4KDEpIGFzIE9QLCAvLyBUT0RPOiB3cm9uZyB0eXBlP1xuICAgIGtleUxlbmd0aDogaGVhZGVyQnVmLnJlYWRVSW50MTZCRSgyKSxcbiAgICBleHRyYXNMZW5ndGg6IGhlYWRlckJ1Zi5yZWFkVUludDgoNCksXG4gICAgZGF0YVR5cGU6IGhlYWRlckJ1Zi5yZWFkVUludDgoNSksXG4gICAgc3RhdHVzOiBoZWFkZXJCdWYucmVhZFVJbnQxNkJFKDYpIGFzIFJlc3BvbnNlU3RhdHVzLCAvLyBUT0RPOiB3cm9uZyB0eXBlP1xuICAgIHRvdGFsQm9keUxlbmd0aDogaGVhZGVyQnVmLnJlYWRVSW50MzJCRSg4KSxcbiAgICBvcGFxdWU6IGhlYWRlckJ1Zi5yZWFkVUludDMyQkUoMTIpLFxuICAgIGNhczogaGVhZGVyQnVmLnNsaWNlKDE2LCAyNCksXG4gIH07XG59XG5cbi8qKiB0b0J1ZmZlciBjb252ZXJ0cyBhIEpTIG1lbWNhY2hlIGhlYWRlciBvYmplY3QgdG8gYSBiaW5hcnkgbWVtY2FjaGUgaGVhZGVyICovXG5leHBvcnQgZnVuY3Rpb24gdG9CdWZmZXIoaGVhZGVyOiBIZWFkZXIpOiBCdWZmZXIge1xuICBjb25zdCBoZWFkZXJCdWYgPSBCdWZmZXIuYWxsb2MoMjQpO1xuICBoZWFkZXJCdWYud3JpdGVVSW50OChoZWFkZXIubWFnaWMsIDApO1xuICBoZWFkZXJCdWYud3JpdGVVSW50OChoZWFkZXIub3Bjb2RlLCAxKTtcbiAgaGVhZGVyQnVmLndyaXRlVUludDE2QkUoaGVhZGVyLmtleUxlbmd0aCwgMik7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQ4KGhlYWRlci5leHRyYXNMZW5ndGgsIDQpO1xuICBoZWFkZXJCdWYud3JpdGVVSW50OChoZWFkZXIuZGF0YVR5cGUgfHwgMCwgNSk7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQxNkJFKGhlYWRlci5zdGF0dXMgfHwgMCwgNik7XG4gIGhlYWRlckJ1Zi53cml0ZVVJbnQzMkJFKGhlYWRlci50b3RhbEJvZHlMZW5ndGgsIDgpO1xuICBoZWFkZXJCdWYud3JpdGVVSW50MzJCRShoZWFkZXIub3BhcXVlIHx8IDAsIDEyKTtcbiAgaWYgKGhlYWRlci5jYXMpIHtcbiAgICBoZWFkZXIuY2FzLmNvcHkoaGVhZGVyQnVmLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgaGVhZGVyQnVmLmZpbGwoXCJcXHgwMFwiLCAxNik7XG4gIH1cbiAgcmV0dXJuIGhlYWRlckJ1Zjtcbn1cbiJdfQ==